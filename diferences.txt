diff --git a/-e b/-e
new file mode 100644
index 0000000..e69de29
diff --git a/app/assets/javascripts/application.js b/app/assets/javascripts/application.js
index d6925fa..e3a9f2d 100644
--- a/app/assets/javascripts/application.js
+++ b/app/assets/javascripts/application.js
@@ -12,5 +12,6 @@
 //
 //= require jquery
 //= require jquery_ujs
+//= require bootstrap
 //= require turbolinks
 //= require_tree .
diff --git a/app/assets/javascripts/sessions.js.coffee b/app/assets/javascripts/sessions.js.coffee
new file mode 100644
index 0000000..24f83d1
--- /dev/null
+++ b/app/assets/javascripts/sessions.js.coffee
@@ -0,0 +1,3 @@
+# Place all the behaviors and hooks related to the matching controller here.
+# All this logic will automatically be available in application.js.
+# You can use CoffeeScript in this file: http://coffeescript.org/
diff --git a/app/assets/stylesheets/sessions.css.scss b/app/assets/stylesheets/sessions.css.scss
new file mode 100644
index 0000000..7121b63
--- /dev/null
+++ b/app/assets/stylesheets/sessions.css.scss
@@ -0,0 +1,3 @@
+// Place all the styles related to the Sessios controller here.
+// They will automatically be included in application.css.
+// You can use Sass (SCSS) here: http://sass-lang.com/
diff --git a/app/controllers/application_controller.rb b/app/controllers/application_controller.rb
index d83690e..7193857 100644
--- a/app/controllers/application_controller.rb
+++ b/app/controllers/application_controller.rb
@@ -1,5 +1,4 @@
 class ApplicationController < ActionController::Base
-  # Prevent CSRF attacks by raising an exception.
-  # For APIs, you may want to use :null_session instead.
   protect_from_forgery with: :exception
+  include SessionsHelper
 end
diff --git a/app/controllers/sessions_controller.rb b/app/controllers/sessions_controller.rb
new file mode 100644
index 0000000..2ab7e1b
--- /dev/null
+++ b/app/controllers/sessions_controller.rb
@@ -0,0 +1,21 @@
+class SessionsController < ApplicationController
+
+  def new
+  end
+
+   def create
+    user = User.find_by(email: params[:session][:email].downcase)
+    if user && user.authenticate(params[:session][:password])
+      sign_in user
+      redirect_to user
+    else
+      flash.now[:error] = 'Invalid email/password combination'
+      render 'new'
+    end
+  end
+
+  def destroy
+    sign_out
+    redirect_to root_url
+  end
+end
\ No newline at end of file
diff --git a/app/controllers/users_controller.rb b/app/controllers/users_controller.rb
index e17e498..c1e723d 100644
--- a/app/controllers/users_controller.rb
+++ b/app/controllers/users_controller.rb
@@ -7,9 +7,10 @@ class UsersController < ApplicationController
   def new
     @user = User.new
   end
- def create
+  def create
     @user = User.new(user_params)
     if @user.save
+      sign_in @user
       flash[:success] = "Welcome to the Sample App!"
       redirect_to @user
     else
diff --git a/app/helpers/sessions_helper.rb b/app/helpers/sessions_helper.rb
new file mode 100644
index 0000000..7a3b126
--- /dev/null
+++ b/app/helpers/sessions_helper.rb
@@ -0,0 +1,24 @@
+module SessionsHelper
+
+  def sign_in(user)
+    remember_token = User.new_remember_token
+    cookies.permanent[:remember_token] = remember_token
+    user.update_attribute(:remember_token, User.encrypt(remember_token))
+    self.current_user = user
+  end
+
+  def signed_in?
+    !current_user.nil?
+  end
+ 
+ def current_user
+    remember_token = User.encrypt(cookies[:remember_token])
+    @current_user ||= User.find_by(remember_token: remember_token)
+  end
+end
+
+def sign_out
+    self.current_user = nil
+    cookies.delete(:remember_token)
+  end
+end
\ No newline at end of file
diff --git a/app/models/user.rb b/app/models/user.rb
index 0ac5cfc..a11b104 100644
--- a/app/models/user.rb
+++ b/app/models/user.rb
@@ -1,5 +1,6 @@
 class User < ActiveRecord::Base
   before_save { self.email = email.downcase }
+  before_create :create_remember_token
   validates :name, presence: true, length: { maximum: 50 }
   VALID_EMAIL_REGEX = /\A[\w+\-.]+@[a-z\d\-.]+\.[a-z]+\z/i
   validates :email, presence:   true,
@@ -7,4 +8,19 @@ class User < ActiveRecord::Base
                     uniqueness: { case_sensitive: false }
   has_secure_password
   validates :password, length: { minimum: 6 }
+
+  def User.new_remember_token
+    SecureRandom.urlsafe_base64
+  end
+
+  def User.encrypt(token)
+    Digest::SHA1.hexdigest(token.to_s)
+  end
+
+  private
+
+    def create_remember_token
+      self.remember_token = User.encrypt(User.new_remember_token)
+    end
+end
 end
\ No newline at end of file
diff --git a/app/views/layouts/_header.html.erb b/app/views/layouts/_header.html.erb
index fe50790..a7a734f 100644
--- a/app/views/layouts/_header.html.erb
+++ b/app/views/layouts/_header.html.erb
@@ -4,9 +4,26 @@
       <%= link_to "sample app", root_path, id: "logo" %>
       <nav>
         <ul class="nav pull-right">
-          <li><%= link_to "Home",    root_path %></li>
-          <li><%= link_to "Help",    help_path %></li>
-          <li><%= link_to "Sign in", '#' %></li>
+          <li><%= link_to "Home", root_path %></li>
+          <li><%= link_to "Help", help_path %></li>
+          <% if signed_in? %>
+            <li><%= link_to "Users", '#' %></li>
+            <li id="fat-menu" class="dropdown">
+              <a href="#" class="dropdown-toggle" data-toggle="dropdown">
+                Account <b class="caret"></b>
+              </a>
+              <ul class="dropdown-menu">
+                <li><%= link_to "Profile", current_user %></li>
+                <li><%= link_to "Settings", '#' %></li>
+                <li class="divider"></li>
+                <li>
+                  <%= link_to "Sign out", signout_path, method: "delete" %>
+                </li>
+              </ul>
+            </li>
+          <% else %>
+            <li><%= link_to "Sign in", signin_path %></li>
+          <% end %>
         </ul>
       </nav>
     </div>
diff --git a/app/views/sessions/new.html.erb b/app/views/sessions/new.html.erb
new file mode 100644
index 0000000..861efb8
--- /dev/null
+++ b/app/views/sessions/new.html.erb
@@ -0,0 +1,19 @@
+<% provide(:title, "Sign in") %>
+<h1>Sign in</h1>
+
+<div class="row">
+  <div class="span6 offset3">
+    <%= form_for(:session, url: sessions_path) do |f| %>
+
+      <%= f.label :email %>
+      <%= f.text_field :email %>
+
+      <%= f.label :password %>
+      <%= f.password_field :password %>
+
+      <%= f.submit "Sign in", class: "btn btn-large btn-primary" %>
+    <% end %>
+
+    <p>New user? <%= link_to "Sign up now!", signup_path %></p>
+  </div>
+</div>
\ No newline at end of file
diff --git a/config/environments/production.rb b/config/environments/production.rb
index 595d3f3..4f35001 100644
--- a/config/environments/production.rb
+++ b/config/environments/production.rb
@@ -40,7 +40,7 @@ SampleApp::Application.configure do
   # config.action_dispatch.x_sendfile_header = 'X-Accel-Redirect' # for nginx
 
   # Force all access to the app over SSL, use Strict-Transport-Security, and use secure cookies.
-  # config.force_ssl = true
+   config.force_ssl = true
 
   # Set to :debug to see everything in the log.
   config.log_level = :info
diff --git a/config/routes.rb b/config/routes.rb
index c7bc482..69c5132 100644
--- a/config/routes.rb
+++ b/config/routes.rb
@@ -1,12 +1,10 @@
 SampleApp::Application.routes.draw do
-  get "users/new"
-
-  root  'static_pages#home'
   resources :users
-  match '/signup',  to: 'users#new',            via: 'get' 
-  match '/help',    to: 'static_pages#help',    via: 'get'
-  match '/about',   to: 'static_pages#about',   via: 'get'
-  match '/contact', to: 'static_pages#contact', via: 'get'
+  resources :sessions, only: [:new, :create, :destroy]
+  root  'static_pages#home'
+  match '/signup',  to: 'users#new',            via: 'get'
+  match '/signin',  to: 'sessions#new',         via: 'get'
+  match '/signout', to: 'sessions#destroy',     via: 'delete'
   # The priority is based upon order of creation: first created -> highest priority.
   # See how all your routes lay out with "rake routes".
 
diff --git a/db/migrate/20131125004404_add_remember_token_to_users.rb b/db/migrate/20131125004404_add_remember_token_to_users.rb
new file mode 100644
index 0000000..74c254f
--- /dev/null
+++ b/db/migrate/20131125004404_add_remember_token_to_users.rb
@@ -0,0 +1,4 @@
+class AddRememberTokenToUsers < ActiveRecord::Migration
+  def change
+  end
+end
diff --git a/db/migrate/[ts]_add_remember_token_to_users.rb b/db/migrate/[ts]_add_remember_token_to_users.rb
new file mode 100644
index 0000000..e5c16c0
--- /dev/null
+++ b/db/migrate/[ts]_add_remember_token_to_users.rb
@@ -0,0 +1,6 @@
+class AddRememberTokenToUsers < ActiveRecord::Migration
+  def change
+    add_column :users, :remember_token, :string
+    add_index  :users, :remember_token
+  end
+end
diff --git a/db/schema.rb b/db/schema.rb
index 6828214..4f6ac65 100644
--- a/db/schema.rb
+++ b/db/schema.rb
@@ -11,7 +11,7 @@
 #
 # It's strongly recommended that you check this file into your version control system.
 
-ActiveRecord::Schema.define(version: 20131113235908) do
+ActiveRecord::Schema.define(version: 20131125004404) do
 
   create_table "users", force: true do |t|
     t.string   "name"
diff --git a/nano.save b/nano.save
new file mode 100644
index 0000000..84ff14d
--- /dev/null
+++ b/nano.save
@@ -0,0 +1,5 @@
+Trimet/streetcar/MAX/WES don't fully talk to each other. This app will make better predictions 
+and route assistance then the current apps by responsive  web.
+
+trimet API and geo location data based on browser ID/mobile ID/wifi ID  
+
diff --git a/spec/models/user_spec.rb b/spec/models/user_spec.rb
index 62de64a..4f17ec9 100644
--- a/spec/models/user_spec.rb
+++ b/spec/models/user_spec.rb
@@ -11,11 +11,19 @@ describe User do
 
   it { should respond_to(:name) }
   it { should respond_to(:email) }
+  it { should respond_to(:password_confirmation) }
+  it { should respond_to(:remember_token) }
+  it { should respond_to(:authenticate) }
   it { should respond_to(:password_digest) }
   it { should respond_to(:password) }
   it { should respond_to(:password_confirmation) }
   it { should be_valid }
   
+  describe "remember token" do
+    before { @user.save }
+    its(:remember_token) { should_not be_blank }
+    end
+  
   describe "when password is not present" do
     before do
       @user = User.new(name: "Example User", email: "user@example.com",
diff --git a/spec/requests/authentication_pages_spec.rb b/spec/requests/authentication_pages_spec.rb
new file mode 100644
index 0000000..73755ea
--- /dev/null
+++ b/spec/requests/authentication_pages_spec.rb
@@ -0,0 +1,41 @@
+require 'spec_helper'
+
+describe "Authentication" do
+
+  subject { page }
+
+  describe "signin page" do
+    before { visit signin_path }
+
+    it { should have_content('Sign in') }
+    it { should have_title('Sign in') }
+  end
+end
+  describe "signin" do
+    before { visit signin_path }
+
+    describe "with valid information" do
+      let(:user) { FactoryGirl.create(:user) }
+      before do
+        fill_in "Email",    with: user.email.upcase
+        fill_in "Password", with: user.password
+        click_button "Sign in"
+      end
+
+      describe "followed by signout" do
+        before { click_link "Sign out" }
+        it { should have_link('Sign in') }
+
+      it { should have_title(user.name) }
+      it { should have_link('Profile',     href: user_path(user)) }
+      it { should have_link('Sign out',    href: signout_path) }
+      it { should_not have_link('Sign in', href: signin_path) }
+    end
+   
+
+    describe "with invalid information" do
+      before { click_button "Sign in" }
+
+      it { should have_title('Sign in') }
+      it { should have_selector('div.alert.alert-error', text: 'Invalid') }
+    end
\ No newline at end of file
diff --git a/spec/requests/user_pages_spec.rb b/spec/requests/user_pages_spec.rb
index 27d78af..7702209 100644
--- a/spec/requests/user_pages_spec.rb
+++ b/spec/requests/user_pages_spec.rb
@@ -41,6 +41,15 @@ describe "User pages" do
         fill_in "Email",        with: "user@example.com"
         fill_in "Password",     with: "foobar"
         fill_in "Confirmation", with: "foobar"
+
+        describe "after saving the user" do
+        before { click_button submit }
+        let(:user) { User.find_by(email: 'user@example.com') }
+
+        it { should have_link('Sign out') }
+        it { should have_title(user.name) }
+        it { should have_selector('div.alert.alert-success', text: 'Welcome') }
+        end
       end
 
       it "should create a user" do
diff --git a/spec/requests/user_pages_spec.txt b/spec/requests/user_pages_spec.txt
deleted file mode 100644
index 2f2352a..0000000
--- a/spec/requests/user_pages_spec.txt
+++ /dev/null
@@ -1,11 +0,0 @@
-require 'spec_helper'
-
-describe "UserPages" do
-  describe "GET /user_pages" do
-    it "works! (now write some real specs)" do
-      # Run the generator again with the --webrat flag if you want to use webrat methods/matchers
-      get user_pages_index_path
-      response.status.should be(200)
-    end
-  end
-end
diff --git a/spec/support/utilities.rb b/spec/support/utilities.rb
index fcfe2e6..d142039 100644
--- a/spec/support/utilities.rb
+++ b/spec/support/utilities.rb
@@ -1,9 +1,13 @@
-def full_title(page_title)
-    base_title = "Ruby on Rails Tutorial Sample App"
-    if page_title.empty?
-      base_title
-    else
-      "#{base_title} | #{page_title}"
-    end
-  end
+include ApplicationHelper
+
+def valid_signin(user)
+  fill_in "Email",    with: user.email
+  fill_in "Password", with: user.password
+  click_button "Sign in"
+end
 
+RSpec::Matchers.define :have_error_message do |message|
+  match do |page|
+    expect(page).to have_selector('div.alert.alert-error', text: message)
+  end
+end
\ No newline at end of file
